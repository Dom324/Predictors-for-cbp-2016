#include <stdio.h>

#define VECTOR_LEN  8
#define HIST_LEN  8

void printBits(size_t const size, void const * const ptr)
{
    unsigned char *b = (unsigned char*) ptr;
    unsigned char byte;
    int i, j;

    for (i=size-1;i>=0;i--)
    {
        for (j=7;j>=0;j--)
        {
            byte = (b[i] >> j) & 1;
            printf("%u", byte);
        }
    }
    puts("");
}


unsigned int
H (unsigned int v1)
{

  int W;
  W = (v1 >> (VECTOR_LEN - 1));
  W = (W ^ (v1 % 2)) << (VECTOR_LEN - 1);
  W = W + (v1 >> 1);
  
  W = W % (1 << VECTOR_LEN);

  return W;
}

unsigned int
H_inversed (unsigned int v1)
{

  int W, k;

  if((v1 >> (VECTOR_LEN - 1) & 1) == (v1 >> (VECTOR_LEN - 2) & 1))
    {

      k = 0;

    }
  else
    {

      k = 1;

    }
    

  W = (v1 << 1) + k;
  W = W % (1 << VECTOR_LEN);
  
  return W;

}

h (long long a)
{
 long long res  = 0;
  res = a ^ (a << (VECTOR_LEN - 1));
  res = res & (1 << (VECTOR_LEN - 1));
  a = a & ((1 << VECTOR_LEN) - 1);
  a = a >> 1;
  res = res + a;
  return res;
}

/*********************************************
 inverse fonction Hi
 *********************************************/

 int
Hi (long long a)
{
 long long res  = 0;
  res = a >> (VECTOR_LEN - 1);
  res = (res ^ (a >> (VECTOR_LEN - 2))) & 1;
  a = a & ((1 << (VECTOR_LEN - 1)) - 1);
  a = a << 1;
  res = res + a;
  return res;
}

 int
INDEX (long long Add,  long long histo, int m, int funct)
{
  long long hm, inter;
  int i;
  int RES;
  
  if (m < 32)
    hm = (histo & ((1 << m) - 1)) + (Add << m);
  else
    {
      if (m != 32)
	{
	  hm = (histo << (64 - m)) ^ (Add);
	}
      else
	hm = ((histo & (0xFFFFFFFF)) << 18) ^ (Add);
    }
  hm = hm ^ (Add << funct) ^ (Add << (10 + funct));
/* incorporate address bits*/
  inter = hm;
  for (i = 0; i < 64; i += (2 * (VECTOR_LEN - funct) + 1))
    {
      inter = inter >> VECTOR_LEN;
      inter = inter >> (VECTOR_LEN - (funct + 1));
      hm = (hm ^ inter);
    }
    return hm;
}

int
main ()
{

  int f0, f1, f2, numPhtEntries, PC, ghr;

  PC = 0b10111010;
  ghr = 0b11000010;
  

  numPhtEntries = (1 << VECTOR_LEN);

  long int v = (PC << HIST_LEN) + ghr;

  int v1 = v % numPhtEntries;
  int v2 = (v >> VECTOR_LEN) % (numPhtEntries);
  
  printf("v1 ");
  printBits(1, &v1);
  
  printf("v2 ");
  printBits(1, &v2);


  f0 = H (v1) ^ H_inversed (v2) ^ v2;
  f1 = H (v1) ^ H_inversed (v2) ^ v1;
  f2 = H_inversed (v1) ^ H (v2) ^ v2;
  
  
  printf("\nf0 ");
  printBits(1, &f0);
  
  printf("\nf1 ");
  printBits(1, &f1);
  
  printf("\nf2 ");
  printBits(1, &f2);
  
  
    int add,indexbim, indexg1, indexg0, indexmeta,  NUMHYST;
    char pg0, pg1, pbim, pmeta;
    int prediction = 0;
    long long Add;
  
    long long GHIST;  
    long long ghist;
    add = PC;
    add = (add >> 4) ^ add;
    NUMHYST = ((add ^ ghr) & 3);
    Add = (long long) add;
    GHIST =  ghist  ^ ((ghist & 3) << 5);
    Add = Add ^ (Add >> 5);
  
  
  
  
  long long hm, inter;
  int i;
  int RES;
  
  
  hm = INDEX (Add, GHIST, 15, 1);

  int F1 = (h (hm) ^ Hi (hm >> VECTOR_LEN) ^ (hm >> VECTOR_LEN)) & ((1 << VECTOR_LEN) - 1);

  hm = INDEX (Add, GHIST, 15, 2);

  int F2 = (h (hm) ^ Hi (hm >> VECTOR_LEN) ^ (hm)) & ((1 << VECTOR_LEN) - 1);

  hm = INDEX (Add, GHIST, 15, 3);

  int F3 = (Hi (hm) ^ h (hm >> VECTOR_LEN) ^ (hm >> VECTOR_LEN)) & ((1 << VECTOR_LEN) - 1);

  hm = INDEX (Add, GHIST, 15, 4);

  int F4 = (Hi (hm) ^ h (hm >> VECTOR_LEN) ^ (hm)) & ((1 << VECTOR_LEN) - 1);
  
  
  printf("\nF1 ");
  printBits(1, &F1);
  
  printf("\nF2 ");
  printBits(1, &F2);
  
  printf("\nF3 ");
  printBits(1, &F3);
  
  printf("\nF4 ");
  printBits(1, &F4);
  
  int random;
  
  random = H(v1);
  printf("\nmoje H ");
  printBits(1, &random);
  
  random = h(v1);
  printf("\njeho H ");
  printBits(1, &random);
  
  random = H_inversed(v1);
  printf("\nmoje H ");
  printBits(1, &random);
  
  random = Hi(v1);
  printf("\njeho H ");
  printBits(1, &random);
  
  
  
}
